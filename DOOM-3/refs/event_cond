<def f='codebrowser/sys/posix/posix_threads.cpp' l='104' type='pthread_cond_t [4]'/>
<use f='codebrowser/sys/posix/posix_threads.cpp' l='122' u='a' c='_Z16Sys_WaitForEventi'/>
<use f='codebrowser/sys/posix/posix_threads.cpp' l='137' u='a' c='_Z16Sys_TriggerEventi'/>
<use f='codebrowser/sys/posix/posix_threads.cpp' l='282' u='a' c='_Z18Posix_InitPThreadsv'/>
<doc f='codebrowser/sys/posix/posix_threads.cpp' l='91'>/*
======================================================
wait and trigger events
we use a single lock to manipulate the conditions, MAX_LOCAL_CRITICAL_SECTIONS-1

the semantics match the win32 version. signals raised while no one is waiting stay raised until a wait happens (which then does a simple pass-through)

NOTE: we use the same mutex for all the events. I don&apos;t think this would become much of a problem
cond_wait unlocks atomically with setting the wait condition, and locks it back before exiting the function
the potential for time wasting lock waits is very low
======================================================
*/</doc>
